//
//  StyleKit.swift
//  bold
//
//  Created by joeis on 6/13/17.
//  Copyright Â© 2017 joeis. All rights reserved.
//
//  Generated by PaintCode Plugin for Sketch
//  http://www.paintcodeapp.com/sketch
//

import UIKit



class StyleKit: NSObject {
    
    
    //MARK: - Canvas Drawings
    
    /// Page 1
    
    class func drawBarsNavigationNavigationBar(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 65), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        let baseTransform = context.userSpaceToDeviceSpaceTransform.inverted()
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 65), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 65)
        
        /// Bar
        let bar = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 375, height: 64))
        context.saveGState()
        // Warning: Blur effects are not supported.
        context.saveGState()
        context.beginPath()
        context.addPath(bar.cgPath)
        context.addRect(bar.bounds.insetBy(dx: 0, dy: -0.5))
        context.clip(using: .evenOdd)
        context.translateBy(x: -376, y: 0)
        do {
            let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
            let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
            let baseOffset = context.convertToDeviceSpace(CGPoint(x: 376, y: 0.5)).applying(baseTransform)
            let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
            let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
            context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0.698, alpha: 1).cgColor)
        }
        UIColor.black.setFill()
        bar.fill()
        context.restoreGState()
        context.saveGState()
        bar.addClip()
        context.drawLinearGradient(CGGradient(colorsSpace: nil, colors: [
                    UIColor(hue: 0.517, saturation: 0.284, brightness: 0.934, alpha: 0.9).cgColor,
                    UIColor(hue: 0.466, saturation: 0.475, brightness: 0.85, alpha: 0.9).cgColor,
                ] as CFArray, locations: [0, 1])!,
            start: CGPoint(x: 187.5, y: 0),
            end: CGPoint(x: 187.5, y: 64),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()
        context.restoreGState()
        /// Right
        // Warning: New symbols are not supported.
        /// Center
        // Warning: New symbols are not supported.
        /// Left
        // Warning: New symbols are not supported.
        /// Status Bar
        // Warning: New symbols are not supported.
        
        context.restoreGState()
    }
    
    class func drawIPhone7(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 667), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 667), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 667)
        
        /// Background Color
        UIColor(hue: 0.484, saturation: 0.087, brightness: 0.955, alpha: 1).setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// Rectangle
        let rectangle = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 375, height: 601), cornerRadius: 29)
        context.saveGState()
        context.translateBy(x: 1, y: 74)
        // Warning: Blur effects are not supported.
        UIColor(white: 0.98, alpha: 1).setFill()
        rectangle.fill()
        context.restoreGState()
        /// Coffee Passport
        do {
            context.saveGState()
            context.translateBy(x: 10, y: 259)
            
            /// Rectangle 2 Copy
            let rectangle2Copy = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 356, height: 75), cornerRadius: 38)
            context.saveGState()
            UIColor(hue: 0.414, saturation: 0.127, brightness: 0.957, alpha: 1).setFill()
            rectangle2Copy.fill()
            context.restoreGState()
            
            /// Blank UI Copy
            // Warning: New symbols are not supported.
            
            /// Coffee Passport
            let coffeePassport = NSMutableAttributedString(string: "Coffee Passport")
            coffeePassport.addAttribute(NSFontAttributeName, value: UIFont(name: "AvenirNext-Bold", size: 24)!, range: NSRange(location: 0, length: coffeePassport.length))
            coffeePassport.addAttribute(NSForegroundColorAttributeName, value: UIColor(white: 0.012, alpha: 1), range: NSRange(location: 0, length: coffeePassport.length))
            coffeePassport.addAttribute(NSKernAttributeName, value: -0.58, range: NSRange(location: 0, length: coffeePassport.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                coffeePassport.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: coffeePassport.length))
            }
            context.saveGState()
            coffeePassport.draw(in: CGRect(x: 108, y: 19, width: 200, height: 37))
            context.restoreGState()
            
            /// Coffee_colon-512
            // Warning: Image layers are not supported.
            
            context.restoreGState()
        }
        /// Partner Hub
        do {
            context.saveGState()
            context.translateBy(x: 10, y: 374)
            
            /// Rectangle 2 Copy
            let rectangle2Copy2 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 356, height: 75), cornerRadius: 38)
            context.saveGState()
            UIColor(hue: 0.414, saturation: 0.127, brightness: 0.957, alpha: 1).setFill()
            rectangle2Copy2.fill()
            context.restoreGState()
            
            /// Blank UI Copy
            // Warning: New symbols are not supported.
            
            /// Partner Hub
            let partnerHub = NSMutableAttributedString(string: "Partner Hub")
            partnerHub.addAttribute(NSFontAttributeName, value: UIFont(name: "AvenirNext-Bold", size: 24)!, range: NSRange(location: 0, length: partnerHub.length))
            partnerHub.addAttribute(NSForegroundColorAttributeName, value: UIColor(white: 0.012, alpha: 1), range: NSRange(location: 0, length: partnerHub.length))
            partnerHub.addAttribute(NSKernAttributeName, value: -0.58, range: NSRange(location: 0, length: partnerHub.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                partnerHub.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: partnerHub.length))
            }
            context.saveGState()
            partnerHub.draw(in: CGRect(x: 108, y: 19, width: 200, height: 37))
            context.restoreGState()
            
            /// music_library_icon
            // Warning: Image layers are not supported.
            
            context.restoreGState()
        }
        /// About
        do {
            context.saveGState()
            context.translateBy(x: 10, y: 489)
            
            /// Rectangle 2 Copy
            let rectangle2Copy3 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 356, height: 75), cornerRadius: 38)
            context.saveGState()
            UIColor(hue: 0.414, saturation: 0.127, brightness: 0.957, alpha: 1).setFill()
            rectangle2Copy3.fill()
            context.restoreGState()
            
            /// Blank UI Copy
            // Warning: New symbols are not supported.
            
            /// About
            let about = NSMutableAttributedString(string: "About")
            about.addAttribute(NSFontAttributeName, value: UIFont(name: "AvenirNext-Bold", size: 24)!, range: NSRange(location: 0, length: about.length))
            about.addAttribute(NSForegroundColorAttributeName, value: UIColor(white: 0.012, alpha: 1), range: NSRange(location: 0, length: about.length))
            about.addAttribute(NSKernAttributeName, value: -0.58, range: NSRange(location: 0, length: about.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                about.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: about.length))
            }
            context.saveGState()
            about.draw(in: CGRect(x: 108, y: 19, width: 200, height: 37))
            context.restoreGState()
            
            /// info
            // Warning: Image layers are not supported.
            
            context.restoreGState()
        }
        /// Schedule
        do {
            context.saveGState()
            context.translateBy(x: 10, y: 154)
            
            /// Rectangle 2
            let rectangle2 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 356, height: 75), cornerRadius: 38)
            context.saveGState()
            UIColor(hue: 0.414, saturation: 0.127, brightness: 0.957, alpha: 1).setFill()
            rectangle2.fill()
            context.restoreGState()
            
            /// Beta!
            let beta = NSMutableAttributedString(string: "Beta!")
            beta.addAttribute(NSFontAttributeName, value: UIFont(name: "AvenirNext-MediumItalic", size: 24)!, range: NSRange(location: 0, length: beta.length))
            beta.addAttribute(NSForegroundColorAttributeName, value: UIColor(white: 0.012, alpha: 1), range: NSRange(location: 0, length: beta.length))
            beta.addAttribute(NSKernAttributeName, value: -0.58, range: NSRange(location: 0, length: beta.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                beta.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: beta.length))
            }
            context.saveGState()
            beta.draw(at: CGPoint(x: 180.5, y: 40))
            context.restoreGState()
            
            /// My Schedule
            let mySchedule = NSMutableAttributedString(string: "My Schedule")
            mySchedule.addAttribute(NSFontAttributeName, value: UIFont(name: "AvenirNext-Bold", size: 24)!, range: NSRange(location: 0, length: mySchedule.length))
            mySchedule.addAttribute(NSForegroundColorAttributeName, value: UIColor(white: 0.012, alpha: 1), range: NSRange(location: 0, length: mySchedule.length))
            mySchedule.addAttribute(NSKernAttributeName, value: -0.58, range: NSRange(location: 0, length: mySchedule.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                mySchedule.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: mySchedule.length))
            }
            context.saveGState()
            mySchedule.draw(in: CGRect(x: 110, y: 7, width: 200, height: 37))
            context.restoreGState()
            
            /// Blank UI
            // Warning: New symbols are not supported.
            
            /// calendar_icon
            // Warning: Image layers are not supported.
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    /// Symbols
    
    class func drawBlankUI(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 75, height: 75), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 75, height: 75), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 75, y: resizedFrame.height / 75)
        
        /// Group
        do {
            context.saveGState()
            
            /// Oval
            let oval = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 75, height: 75))
            context.saveGState()
            context.saveGState()
            oval.addClip()
            context.drawLinearGradient(CGGradient(colorsSpace: nil, colors: [
                        UIColor(hue: 0.479, saturation: 0.659, brightness: 0.927, alpha: 1).cgColor,
                        UIColor(hue: 0.398, saturation: 0.803, brightness: 0.746, alpha: 1).cgColor,
                    ] as CFArray, locations: [0, 1])!,
                start: CGPoint(x: 70.7, y: 0),
                end: CGPoint(x: 0, y: 80.52),
                options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
            context.restoreGState()
            context.restoreGState()
            
            /// Oval 2
            let oval2 = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 71, height: 71))
            context.saveGState()
            context.translateBy(x: 2, y: 2)
            UIColor.white.setFill()
            oval2.fill()
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawOverridesNavigationBarRightActionText(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 122, height: 44), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 122, height: 44), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 122, y: resizedFrame.height / 44)
        
        // Empty.
        
        context.restoreGState()
    }
    
    class func drawOverridesNavigationBarCenterTitle(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 175, height: 44), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 175, height: 44), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 175, y: resizedFrame.height / 44)
        
        /// Partner
        let partner = NSMutableAttributedString(string: "Partner")
        partner.addAttribute(NSFontAttributeName, value: UIFont.boldSystemFont(ofSize: 17), range: NSRange(location: 0, length: partner.length))
        partner.addAttribute(NSForegroundColorAttributeName, value: UIColor(white: 0.012, alpha: 1), range: NSRange(location: 0, length: partner.length))
        partner.addAttribute(NSKernAttributeName, value: -0.41, range: NSRange(location: 0, length: partner.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .center
            partner.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: partner.length))
        }
        context.saveGState()
        partner.draw(at: CGPoint(x: 57.5, y: 12))
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawOverridesNavigationBarLeftBackButton(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 128, height: 44), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 128, height: 44), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 128, y: resizedFrame.height / 44)
        
        // Empty.
        
        context.restoreGState()
    }
    
    class func drawOverridesStatusBarSignalBlack2(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 140, height: 20), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 140, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 140, y: resizedFrame.height / 20)
        
        /// Wi-Fi
        let wiFi = UIBezierPath()
        wiFi.move(to: CGPoint(x: 8.64, y: 6.94))
        wiFi.addLine(to: CGPoint(x: 6.52, y: 9))
        wiFi.addLine(to: CGPoint(x: 4.36, y: 6.91))
        wiFi.addCurve(to: CGPoint(x: 6.49, y: 5.97), controlPoint1: CGPoint(x: 4.88, y: 6.33), controlPoint2: CGPoint(x: 5.64, y: 5.97))
        wiFi.addCurve(to: CGPoint(x: 8.64, y: 6.94), controlPoint1: CGPoint(x: 7.35, y: 5.97), controlPoint2: CGPoint(x: 8.13, y: 6.35))
        wiFi.close()
        wiFi.move(to: CGPoint(x: 10.82, y: 4.82))
        wiFi.addLine(to: CGPoint(x: 10.82, y: 4.82))
        wiFi.addLine(to: CGPoint(x: 9.73, y: 5.88))
        wiFi.addCurve(to: CGPoint(x: 6.49, y: 4.48), controlPoint1: CGPoint(x: 8.94, y: 5.02), controlPoint2: CGPoint(x: 7.78, y: 4.48))
        wiFi.addCurve(to: CGPoint(x: 3.27, y: 5.85), controlPoint1: CGPoint(x: 5.21, y: 4.48), controlPoint2: CGPoint(x: 4.07, y: 5.01))
        wiFi.addLine(to: CGPoint(x: 2.18, y: 4.79))
        wiFi.addCurve(to: CGPoint(x: 6.49, y: 2.98), controlPoint1: CGPoint(x: 3.26, y: 3.68), controlPoint2: CGPoint(x: 4.79, y: 2.98))
        wiFi.addCurve(to: CGPoint(x: 10.82, y: 4.82), controlPoint1: CGPoint(x: 8.2, y: 2.98), controlPoint2: CGPoint(x: 9.74, y: 3.69))
        wiFi.close()
        wiFi.move(to: CGPoint(x: 13, y: 2.71))
        wiFi.addLine(to: CGPoint(x: 11.91, y: 3.76))
        wiFi.addCurve(to: CGPoint(x: 6.49, y: 1.49), controlPoint1: CGPoint(x: 10.55, y: 2.37), controlPoint2: CGPoint(x: 8.63, y: 1.49))
        wiFi.addCurve(to: CGPoint(x: 1.09, y: 3.74), controlPoint1: CGPoint(x: 4.36, y: 1.49), controlPoint2: CGPoint(x: 2.45, y: 2.35))
        wiFi.addLine(to: CGPoint(x: 0, y: 2.68))
        wiFi.addCurve(to: CGPoint(x: 6.49, y: 0), controlPoint1: CGPoint(x: 1.64, y: 1.03), controlPoint2: CGPoint(x: 3.94, y: 0))
        wiFi.addCurve(to: CGPoint(x: 13, y: 2.71), controlPoint1: CGPoint(x: 9.05, y: 0), controlPoint2: CGPoint(x: 11.36, y: 1.04))
        wiFi.close()
        wiFi.move(to: CGPoint(x: 13, y: 2.71))
        context.saveGState()
        context.translateBy(x: 87.5, y: 5.5)
        wiFi.usesEvenOddFillRule = true
        UIColor(white: 0.012, alpha: 1).setFill()
        wiFi.fill()
        context.restoreGState()
        /// Carrier
        let carrier = NSMutableAttributedString(string: "Sketch")
        carrier.addAttribute(NSFontAttributeName, value: UIFont.systemFont(ofSize: 12), range: NSRange(location: 0, length: carrier.length))
        carrier.addAttribute(NSForegroundColorAttributeName, value: UIColor(white: 0.012, alpha: 1), range: NSRange(location: 0, length: carrier.length))
        context.saveGState()
        carrier.draw(at: CGPoint(x: 44, y: 3.5))
        context.restoreGState()
        /// Mobile Signal
        let mobileSignal = UIBezierPath()
        mobileSignal.move(to: CGPoint(x: 2.75, y: 5.5))
        mobileSignal.addCurve(to: CGPoint(x: 0, y: 2.75), controlPoint1: CGPoint(x: 1.23, y: 5.5), controlPoint2: CGPoint(x: 0, y: 4.27))
        mobileSignal.addCurve(to: CGPoint(x: 2.75, y: 0), controlPoint1: CGPoint(x: 0, y: 1.23), controlPoint2: CGPoint(x: 1.23, y: 0))
        mobileSignal.addCurve(to: CGPoint(x: 5.5, y: 2.75), controlPoint1: CGPoint(x: 4.27, y: 0), controlPoint2: CGPoint(x: 5.5, y: 1.23))
        mobileSignal.addCurve(to: CGPoint(x: 2.75, y: 5.5), controlPoint1: CGPoint(x: 5.5, y: 4.27), controlPoint2: CGPoint(x: 4.27, y: 5.5))
        mobileSignal.close()
        mobileSignal.move(to: CGPoint(x: 9.75, y: 5.5))
        mobileSignal.addCurve(to: CGPoint(x: 7, y: 2.75), controlPoint1: CGPoint(x: 8.23, y: 5.5), controlPoint2: CGPoint(x: 7, y: 4.27))
        mobileSignal.addCurve(to: CGPoint(x: 9.75, y: 0), controlPoint1: CGPoint(x: 7, y: 1.23), controlPoint2: CGPoint(x: 8.23, y: 0))
        mobileSignal.addCurve(to: CGPoint(x: 12.5, y: 2.75), controlPoint1: CGPoint(x: 11.27, y: 0), controlPoint2: CGPoint(x: 12.5, y: 1.23))
        mobileSignal.addCurve(to: CGPoint(x: 9.75, y: 5.5), controlPoint1: CGPoint(x: 12.5, y: 4.27), controlPoint2: CGPoint(x: 11.27, y: 5.5))
        mobileSignal.close()
        mobileSignal.move(to: CGPoint(x: 16.75, y: 5.5))
        mobileSignal.addCurve(to: CGPoint(x: 14, y: 2.75), controlPoint1: CGPoint(x: 15.23, y: 5.5), controlPoint2: CGPoint(x: 14, y: 4.27))
        mobileSignal.addCurve(to: CGPoint(x: 16.75, y: 0), controlPoint1: CGPoint(x: 14, y: 1.23), controlPoint2: CGPoint(x: 15.23, y: 0))
        mobileSignal.addCurve(to: CGPoint(x: 19.5, y: 2.75), controlPoint1: CGPoint(x: 18.27, y: 0), controlPoint2: CGPoint(x: 19.5, y: 1.23))
        mobileSignal.addCurve(to: CGPoint(x: 16.75, y: 5.5), controlPoint1: CGPoint(x: 19.5, y: 4.27), controlPoint2: CGPoint(x: 18.27, y: 5.5))
        mobileSignal.close()
        mobileSignal.move(to: CGPoint(x: 23.75, y: 5.5))
        mobileSignal.addCurve(to: CGPoint(x: 21, y: 2.75), controlPoint1: CGPoint(x: 22.23, y: 5.5), controlPoint2: CGPoint(x: 21, y: 4.27))
        mobileSignal.addCurve(to: CGPoint(x: 23.75, y: 0), controlPoint1: CGPoint(x: 21, y: 1.23), controlPoint2: CGPoint(x: 22.23, y: 0))
        mobileSignal.addCurve(to: CGPoint(x: 26.5, y: 2.75), controlPoint1: CGPoint(x: 25.27, y: 0), controlPoint2: CGPoint(x: 26.5, y: 1.23))
        mobileSignal.addCurve(to: CGPoint(x: 23.75, y: 5.5), controlPoint1: CGPoint(x: 26.5, y: 4.27), controlPoint2: CGPoint(x: 25.27, y: 5.5))
        mobileSignal.close()
        mobileSignal.move(to: CGPoint(x: 30.75, y: 5.5))
        mobileSignal.addCurve(to: CGPoint(x: 28, y: 2.75), controlPoint1: CGPoint(x: 29.23, y: 5.5), controlPoint2: CGPoint(x: 28, y: 4.27))
        mobileSignal.addCurve(to: CGPoint(x: 30.75, y: 0), controlPoint1: CGPoint(x: 28, y: 1.23), controlPoint2: CGPoint(x: 29.23, y: 0))
        mobileSignal.addCurve(to: CGPoint(x: 33.5, y: 2.75), controlPoint1: CGPoint(x: 32.27, y: 0), controlPoint2: CGPoint(x: 33.5, y: 1.23))
        mobileSignal.addCurve(to: CGPoint(x: 30.75, y: 5.5), controlPoint1: CGPoint(x: 33.5, y: 4.27), controlPoint2: CGPoint(x: 32.27, y: 5.5))
        mobileSignal.close()
        mobileSignal.move(to: CGPoint(x: 30.75, y: 5.5))
        context.saveGState()
        context.translateBy(x: 6.5, y: 7.5)
        mobileSignal.usesEvenOddFillRule = true
        UIColor(white: 0.012, alpha: 1).setFill()
        mobileSignal.fill()
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawOverridesStatusBarSignalBlack(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 140, height: 20), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 140, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 140, y: resizedFrame.height / 20)
        
        /// Wi-Fi
        let wiFi = UIBezierPath()
        wiFi.move(to: CGPoint(x: 8.64, y: 6.94))
        wiFi.addLine(to: CGPoint(x: 6.52, y: 9))
        wiFi.addLine(to: CGPoint(x: 4.36, y: 6.91))
        wiFi.addCurve(to: CGPoint(x: 6.49, y: 5.97), controlPoint1: CGPoint(x: 4.88, y: 6.33), controlPoint2: CGPoint(x: 5.64, y: 5.97))
        wiFi.addCurve(to: CGPoint(x: 8.64, y: 6.94), controlPoint1: CGPoint(x: 7.35, y: 5.97), controlPoint2: CGPoint(x: 8.13, y: 6.35))
        wiFi.close()
        wiFi.move(to: CGPoint(x: 10.82, y: 4.82))
        wiFi.addLine(to: CGPoint(x: 10.82, y: 4.82))
        wiFi.addLine(to: CGPoint(x: 9.73, y: 5.88))
        wiFi.addCurve(to: CGPoint(x: 6.49, y: 4.48), controlPoint1: CGPoint(x: 8.94, y: 5.02), controlPoint2: CGPoint(x: 7.78, y: 4.48))
        wiFi.addCurve(to: CGPoint(x: 3.27, y: 5.85), controlPoint1: CGPoint(x: 5.21, y: 4.48), controlPoint2: CGPoint(x: 4.07, y: 5.01))
        wiFi.addLine(to: CGPoint(x: 2.18, y: 4.79))
        wiFi.addCurve(to: CGPoint(x: 6.49, y: 2.98), controlPoint1: CGPoint(x: 3.26, y: 3.68), controlPoint2: CGPoint(x: 4.79, y: 2.98))
        wiFi.addCurve(to: CGPoint(x: 10.82, y: 4.82), controlPoint1: CGPoint(x: 8.2, y: 2.98), controlPoint2: CGPoint(x: 9.74, y: 3.69))
        wiFi.close()
        wiFi.move(to: CGPoint(x: 6.49, y: 0))
        wiFi.addCurve(to: CGPoint(x: 13, y: 2.71), controlPoint1: CGPoint(x: 9.05, y: 0), controlPoint2: CGPoint(x: 11.36, y: 1.04))
        wiFi.addLine(to: CGPoint(x: 11.91, y: 3.76))
        wiFi.addCurve(to: CGPoint(x: 6.49, y: 1.49), controlPoint1: CGPoint(x: 10.55, y: 2.37), controlPoint2: CGPoint(x: 8.63, y: 1.49))
        wiFi.addCurve(to: CGPoint(x: 1.09, y: 3.74), controlPoint1: CGPoint(x: 4.36, y: 1.49), controlPoint2: CGPoint(x: 2.45, y: 2.35))
        wiFi.addLine(to: CGPoint(x: 0, y: 2.68))
        wiFi.addCurve(to: CGPoint(x: 6.49, y: 0), controlPoint1: CGPoint(x: 1.64, y: 1.03), controlPoint2: CGPoint(x: 3.94, y: 0))
        wiFi.close()
        wiFi.move(to: CGPoint(x: 6.49, y: 0))
        context.saveGState()
        context.translateBy(x: 87.5, y: 5.5)
        wiFi.usesEvenOddFillRule = true
        UIColor(white: 0.012, alpha: 1).setFill()
        wiFi.fill()
        context.restoreGState()
        /// Carrier
        let carrier = NSMutableAttributedString(string: "JOEIS")
        carrier.addAttribute(NSFontAttributeName, value: UIFont.systemFont(ofSize: 12), range: NSRange(location: 0, length: carrier.length))
        carrier.addAttribute(NSForegroundColorAttributeName, value: UIColor(white: 0.012, alpha: 1), range: NSRange(location: 0, length: carrier.length))
        context.saveGState()
        carrier.draw(at: CGPoint(x: 44, y: 3.5))
        context.restoreGState()
        /// Mobile Signal
        let mobileSignal = UIBezierPath()
        mobileSignal.move(to: CGPoint(x: 2.75, y: 5.5))
        mobileSignal.addCurve(to: CGPoint(x: 0, y: 2.75), controlPoint1: CGPoint(x: 1.23, y: 5.5), controlPoint2: CGPoint(x: 0, y: 4.27))
        mobileSignal.addCurve(to: CGPoint(x: 2.75, y: 0), controlPoint1: CGPoint(x: 0, y: 1.23), controlPoint2: CGPoint(x: 1.23, y: 0))
        mobileSignal.addCurve(to: CGPoint(x: 5.5, y: 2.75), controlPoint1: CGPoint(x: 4.27, y: 0), controlPoint2: CGPoint(x: 5.5, y: 1.23))
        mobileSignal.addCurve(to: CGPoint(x: 2.75, y: 5.5), controlPoint1: CGPoint(x: 5.5, y: 4.27), controlPoint2: CGPoint(x: 4.27, y: 5.5))
        mobileSignal.close()
        mobileSignal.move(to: CGPoint(x: 9.75, y: 5.5))
        mobileSignal.addCurve(to: CGPoint(x: 7, y: 2.75), controlPoint1: CGPoint(x: 8.23, y: 5.5), controlPoint2: CGPoint(x: 7, y: 4.27))
        mobileSignal.addCurve(to: CGPoint(x: 9.75, y: 0), controlPoint1: CGPoint(x: 7, y: 1.23), controlPoint2: CGPoint(x: 8.23, y: 0))
        mobileSignal.addCurve(to: CGPoint(x: 12.5, y: 2.75), controlPoint1: CGPoint(x: 11.27, y: 0), controlPoint2: CGPoint(x: 12.5, y: 1.23))
        mobileSignal.addCurve(to: CGPoint(x: 9.75, y: 5.5), controlPoint1: CGPoint(x: 12.5, y: 4.27), controlPoint2: CGPoint(x: 11.27, y: 5.5))
        mobileSignal.close()
        mobileSignal.move(to: CGPoint(x: 16.75, y: 5.5))
        mobileSignal.addCurve(to: CGPoint(x: 14, y: 2.75), controlPoint1: CGPoint(x: 15.23, y: 5.5), controlPoint2: CGPoint(x: 14, y: 4.27))
        mobileSignal.addCurve(to: CGPoint(x: 16.75, y: 0), controlPoint1: CGPoint(x: 14, y: 1.23), controlPoint2: CGPoint(x: 15.23, y: 0))
        mobileSignal.addCurve(to: CGPoint(x: 19.5, y: 2.75), controlPoint1: CGPoint(x: 18.27, y: 0), controlPoint2: CGPoint(x: 19.5, y: 1.23))
        mobileSignal.addCurve(to: CGPoint(x: 16.75, y: 5.5), controlPoint1: CGPoint(x: 19.5, y: 4.27), controlPoint2: CGPoint(x: 18.27, y: 5.5))
        mobileSignal.close()
        mobileSignal.move(to: CGPoint(x: 23.75, y: 5.5))
        mobileSignal.addCurve(to: CGPoint(x: 21, y: 2.75), controlPoint1: CGPoint(x: 22.23, y: 5.5), controlPoint2: CGPoint(x: 21, y: 4.27))
        mobileSignal.addCurve(to: CGPoint(x: 23.75, y: 0), controlPoint1: CGPoint(x: 21, y: 1.23), controlPoint2: CGPoint(x: 22.23, y: 0))
        mobileSignal.addCurve(to: CGPoint(x: 26.5, y: 2.75), controlPoint1: CGPoint(x: 25.27, y: 0), controlPoint2: CGPoint(x: 26.5, y: 1.23))
        mobileSignal.addCurve(to: CGPoint(x: 23.75, y: 5.5), controlPoint1: CGPoint(x: 26.5, y: 4.27), controlPoint2: CGPoint(x: 25.27, y: 5.5))
        mobileSignal.close()
        mobileSignal.move(to: CGPoint(x: 30.75, y: 5.5))
        mobileSignal.addCurve(to: CGPoint(x: 28, y: 2.75), controlPoint1: CGPoint(x: 29.23, y: 5.5), controlPoint2: CGPoint(x: 28, y: 4.27))
        mobileSignal.addCurve(to: CGPoint(x: 30.75, y: 0), controlPoint1: CGPoint(x: 28, y: 1.23), controlPoint2: CGPoint(x: 29.23, y: 0))
        mobileSignal.addCurve(to: CGPoint(x: 33.5, y: 2.75), controlPoint1: CGPoint(x: 32.27, y: 0), controlPoint2: CGPoint(x: 33.5, y: 1.23))
        mobileSignal.addCurve(to: CGPoint(x: 30.75, y: 5.5), controlPoint1: CGPoint(x: 33.5, y: 4.27), controlPoint2: CGPoint(x: 32.27, y: 5.5))
        mobileSignal.close()
        mobileSignal.move(to: CGPoint(x: 30.75, y: 5.5))
        context.saveGState()
        context.translateBy(x: 6.5, y: 7.5)
        mobileSignal.usesEvenOddFillRule = true
        UIColor(white: 0.012, alpha: 1).setFill()
        mobileSignal.fill()
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawBarsStatusBlack(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 20), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 20)
        
        /// Pin Right
        do {
            context.saveGState()
            context.translateBy(x: 309, y: 3)
            
            /// Battery
            let battery = UIBezierPath()
            battery.move(to: CGPoint(x: 1.49, y: 0))
            battery.addLine(to: CGPoint(x: 21.01, y: 0))
            battery.addCurve(to: CGPoint(x: 22.5, y: 1.51), controlPoint1: CGPoint(x: 21.83, y: 0), controlPoint2: CGPoint(x: 22.5, y: 0.67))
            battery.addLine(to: CGPoint(x: 22.5, y: 7.99))
            battery.addCurve(to: CGPoint(x: 21.01, y: 9.5), controlPoint1: CGPoint(x: 22.5, y: 8.83), controlPoint2: CGPoint(x: 21.83, y: 9.5))
            battery.addLine(to: CGPoint(x: 1.49, y: 9.5))
            battery.addCurve(to: CGPoint(x: 0, y: 7.99), controlPoint1: CGPoint(x: 0.67, y: 9.5), controlPoint2: CGPoint(x: 0, y: 8.83))
            battery.addLine(to: CGPoint(x: 0, y: 1.51))
            battery.addCurve(to: CGPoint(x: 1.49, y: 0), controlPoint1: CGPoint(x: 0, y: 0.67), controlPoint2: CGPoint(x: 0.67, y: 0))
            battery.close()
            battery.move(to: CGPoint(x: 23, y: 3))
            battery.addLine(to: CGPoint(x: 23.75, y: 3))
            battery.addCurve(to: CGPoint(x: 24.5, y: 3.74), controlPoint1: CGPoint(x: 24.17, y: 3), controlPoint2: CGPoint(x: 24.5, y: 3.33))
            battery.addLine(to: CGPoint(x: 24.5, y: 5.76))
            battery.addCurve(to: CGPoint(x: 23.75, y: 6.5), controlPoint1: CGPoint(x: 24.5, y: 6.16), controlPoint2: CGPoint(x: 24.16, y: 6.5))
            battery.addLine(to: CGPoint(x: 23, y: 6.5))
            battery.addLine(to: CGPoint(x: 23, y: 3))
            battery.close()
            battery.move(to: CGPoint(x: 1.51, y: 0.5))
            battery.addCurve(to: CGPoint(x: 0.5, y: 1.51), controlPoint1: CGPoint(x: 0.95, y: 0.5), controlPoint2: CGPoint(x: 0.5, y: 0.96))
            battery.addLine(to: CGPoint(x: 0.5, y: 7.99))
            battery.addCurve(to: CGPoint(x: 1.51, y: 9), controlPoint1: CGPoint(x: 0.5, y: 8.55), controlPoint2: CGPoint(x: 0.95, y: 9))
            battery.addLine(to: CGPoint(x: 20.99, y: 9))
            battery.addCurve(to: CGPoint(x: 22, y: 7.99), controlPoint1: CGPoint(x: 21.55, y: 9), controlPoint2: CGPoint(x: 22, y: 8.54))
            battery.addLine(to: CGPoint(x: 22, y: 1.51))
            battery.addCurve(to: CGPoint(x: 20.99, y: 0.5), controlPoint1: CGPoint(x: 22, y: 0.95), controlPoint2: CGPoint(x: 21.55, y: 0.5))
            battery.addLine(to: CGPoint(x: 1.51, y: 0.5))
            battery.close()
            battery.move(to: CGPoint(x: 1.51, y: 1))
            battery.addLine(to: CGPoint(x: 20.99, y: 1))
            battery.addCurve(to: CGPoint(x: 21.5, y: 1.49), controlPoint1: CGPoint(x: 21.27, y: 1), controlPoint2: CGPoint(x: 21.5, y: 1.22))
            battery.addLine(to: CGPoint(x: 21.5, y: 8.01))
            battery.addCurve(to: CGPoint(x: 20.99, y: 8.5), controlPoint1: CGPoint(x: 21.5, y: 8.28), controlPoint2: CGPoint(x: 21.27, y: 8.5))
            battery.addLine(to: CGPoint(x: 1.51, y: 8.5))
            battery.addCurve(to: CGPoint(x: 1, y: 8.01), controlPoint1: CGPoint(x: 1.23, y: 8.5), controlPoint2: CGPoint(x: 1, y: 8.28))
            battery.addLine(to: CGPoint(x: 1, y: 1.49))
            battery.addCurve(to: CGPoint(x: 1.51, y: 1), controlPoint1: CGPoint(x: 1, y: 1.22), controlPoint2: CGPoint(x: 1.23, y: 1))
            battery.close()
            battery.move(to: CGPoint(x: 1.51, y: 1))
            context.saveGState()
            context.translateBy(x: 36, y: 2.5)
            battery.usesEvenOddFillRule = true
            UIColor(white: 0.012, alpha: 1).setFill()
            battery.fill()
            context.restoreGState()
            
            /// 100%
            let _100 = NSMutableAttributedString(string: "100%")
            _100.addAttribute(NSFontAttributeName, value: UIFont.systemFont(ofSize: 12), range: NSRange(location: 0, length: _100.length))
            _100.addAttribute(NSForegroundColorAttributeName, value: UIColor(white: 0.012, alpha: 1), range: NSRange(location: 0, length: _100.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .right
                _100.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: _100.length))
            }
            context.saveGState()
            _100.draw(in: CGRect(x: 0, y: 0.5, width: 33, height: 16))
            context.restoreGState()
            
            context.restoreGState()
        }
        /// Time
        let time = NSMutableAttributedString(string: "9:41 AM")
        time.addAttribute(NSFontAttributeName, value: UIFont.boldSystemFont(ofSize: 12), range: NSRange(location: 0, length: time.length))
        time.addAttribute(NSForegroundColorAttributeName, value: UIColor(white: 0.012, alpha: 1), range: NSRange(location: 0, length: time.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .center
            time.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: time.length))
        }
        context.saveGState()
        time.draw(at: CGPoint(x: 163, y: 3.5))
        context.restoreGState()
        /// Signal
        // Warning: New symbols are not supported.
        
        context.restoreGState()
    }
    
    
    //MARK: - Canvas Images
    
    /// Page 1
    
    class func imageOfBarsNavigationNavigationBar() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 65), false, 0)
        StyleKit.drawBarsNavigationNavigationBar()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfIPhone7() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 667), false, 0)
        StyleKit.drawIPhone7()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    /// Symbols
    
    class func imageOfBlankUI() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 75, height: 75), false, 0)
        StyleKit.drawBlankUI()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfOverridesNavigationBarRightActionText() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 122, height: 44), false, 0)
        StyleKit.drawOverridesNavigationBarRightActionText()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfOverridesNavigationBarCenterTitle() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 175, height: 44), false, 0)
        StyleKit.drawOverridesNavigationBarCenterTitle()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfOverridesNavigationBarLeftBackButton() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 128, height: 44), false, 0)
        StyleKit.drawOverridesNavigationBarLeftBackButton()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfOverridesStatusBarSignalBlack2() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 140, height: 20), false, 0)
        StyleKit.drawOverridesStatusBarSignalBlack2()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfOverridesStatusBarSignalBlack() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 140, height: 20), false, 0)
        StyleKit.drawOverridesStatusBarSignalBlack()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfBarsStatusBlack() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 20), false, 0)
        StyleKit.drawBarsStatusBlack()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    
    //MARK: - Resizing Behavior
    
    enum ResizingBehavior {
        case aspectFit /// The content is proportionally resized to fit into the target rectangle.
        case aspectFill /// The content is proportionally resized to completely fill the target rectangle.
        case stretch /// The content is stretched to match the entire target rectangle.
        case center /// The content is centered in the target rectangle, but it is NOT resized.
        
        func apply(rect: CGRect, target: CGRect) -> CGRect {
            if rect == target || target == CGRect.zero {
                return rect
            }
            
            var scales = CGSize.zero
            scales.width = abs(target.width / rect.width)
            scales.height = abs(target.height / rect.height)
            
            switch self {
                case .aspectFit:
                    scales.width = min(scales.width, scales.height)
                    scales.height = scales.width
                case .aspectFill:
                    scales.width = max(scales.width, scales.height)
                    scales.height = scales.width
                case .stretch:
                    break
                case .center:
                    scales.width = 1
                    scales.height = 1
            }
            
            var result = rect.standardized
            result.size.width *= scales.width
            result.size.height *= scales.height
            result.origin.x = target.minX + (target.width - result.width) / 2
            result.origin.y = target.minY + (target.height - result.height) / 2
            return result
        }
    }
    
    
}
